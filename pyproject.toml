# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tool.poetry]
# Charm is not packed as a standard Python package; this information is not used
name = "charm"
version = "0.1.0"
description = ""
authors = []

[tool.poetry.dependencies]
python = "^3.10"
ops = "^2.16.1"
tenacity = "^8.5.0"
jinja2 = "^3.1.4"
overrides = "7.7.0"
requests = "2.32.3"
shortuuid = "1.0.13"
pydantic = "^1.10.18, <2"
cryptography = "^43.0.1"
jsonschema = "^4.23.0"


[tool.poetry.group.charm-libs.dependencies]
# data_platform_libs/v0/data_interfaces.py
ops = ">=2.0.0"
# data_platform_libs/v0/upgrade.py
# grafana_agent/v0/cos_agent.py requires pydantic <2
pydantic = "^1.10, <2"
# tls_certificates_interface/v1/tls_certificates.py
cryptography = "^43.0.0"
jsonschema = "^4.21.1"
# grafana_agent/v0/cos_agent.py
cosl = ">=0.0.7"
bcrypt = ">=4.0.1"

[tool.poetry.group.format]
optional = true

[tool.poetry.group.format.dependencies]
ruff = "^0.6.5"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
codespell = "^2.3.0"
shellcheck-py = "^0.10.0.1"

[tool.poetry.group.unit.dependencies]
pytest = "^8.3.3"
pytest-asyncio = "*"
coverage = {extras = ["toml"], version = "^7.6.1"}
parameterized = "^0.9.0"

[tool.poetry.group.integration.dependencies]
pytest = "^8.3.3"
pytest-github-secrets = {git = "https://github.com/canonical/data-platform-workflows", tag = "v21.0.1", subdirectory = "python/pytest_plugins/github_secrets"}
pytest-operator = "^0.36.0"
pytest-operator-cache = {git = "https://github.com/canonical/data-platform-workflows", tag = "v21.0.1", subdirectory = "python/pytest_plugins/pytest_operator_cache"}
pytest-operator-groups = {git = "https://github.com/canonical/data-platform-workflows", tag = "v21.0.1", subdirectory = "python/pytest_plugins/pytest_operator_groups"}
pytest-microceph = {git = "https://github.com/canonical/data-platform-workflows", tag = "v21.0.1", subdirectory = "python/pytest_plugins/microceph"}
juju = "^3.5.2"
ops = "^2.16.1"
tenacity = "^8.5.0"
pyyaml = "^6.0.2"
urllib3 = "^2.2.3"
protobuf = "5.28.2"

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"
markers = ["unstable"]
asyncio_mode = "auto"

# Formatting tools configuration
[tool.black]
line-length = 99
target-version = ["py310"]

# Linting tools configuration
[tool.ruff]
# preview and explicit preview are enabled for CPY001
preview = true
target-version = "py310"
src = ["src", "."]
line-length = 99

[tool.ruff.lint]
explicit-preview-rules = true
select = ["A", "E", "W", "F", "C", "N", "D", "I001", "CPY001"]
extend-ignore = [
    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
]
# Ignore E501 because using black creates errors with this
# Ignore D107 Missing docstring in __init__
ignore = ["E501", "D107"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D100", "D101", "D102", "D103", "D104"]

[tool.ruff.lint.flake8-copyright]
# Check for properly formatted copyright header in each file
author = "Canonical Ltd."
notice-rgx = "Copyright\\s\\d{4}([-,]\\d{4})*\\s+"
min-file-size = 1

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"
